var pageComponent=webpackJsonppageComponent([4],{276:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=n(1),l=o(s),u=n(2),c=o(u);n(7),n(8),n(9),n(10),n(11),n(12),n(13),n(14),n(15),n(16),n(17),n(18),n(19),n(20),n(21);var p=n(277),d=o(p),h=function(e){function t(){return i(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),t}(l.default);c.default.register(h,d.default),t.default=h},277:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.templates=t.IxcOL=void 0;var s,l=n(1),u=o(l),c=n(2),p=o(c);goog.loadModule(function(e){function t(e,t,o){var s=function(){i("article",null,null,"id","1"),i("h2"),a("Principles"),r("h2"),i("h6");var t=e.page.description;"function"==typeof t?t():null!=t&&a(t),r("h6"),i("p"),a("The following principles guide all the rules in the Evolvable REST API Guidelines and make them very appropriate for each of these scenarios."),r("p"),r("article"),i("article",null,null,"id","2"),i("h2"),a("Simplicity"),r("h2"),i("p"),a("One of the goals of any API is to attract as many developers as possible. It is therefore critical that the API be self-describing and simple, helping developers intuitively learn how to use without without relying on documentation. The API must suggest its own usage."),r("p"),r("article"),i("article",null,null,"id","3"),i("h2"),a("Loose Coupling"),r("h2"),i("p"),a("When services are loosely coupled, a change to one service should not require a change to another. When designing distributed systems, this general principle becomes of even greater importance. Evolvable REST APIs must embrace it, favouring API designs that decouple the provider of an API from any of its consumers, be it a microservice, mobile device, IoT device or any other."),r("p"),i("p"),a("APIs must also be designed to be able to evolve gracefully, without introducing backwards incompatible changes. This allows introducing new capabilities over time without requiring consumers to be changed until those capabilities are needed for them."),r("p"),r("article"),i("article",null,null,"id","4"),i("h2"),a("Consistency"),r("h2"),i("p"),a("Consistency is a key ingredient of software that is built for the long run, even more so for distributed software. Consistency not only can speed up development and reduce the learning curve but also reduces the maintenance cost. Evolvable REST APIs must be consistent with one another, adopting the same principles and recommendations, including those described in this guide."),r("p"),r("article"),i("article",null,null,"id","5"),i("h2"),a("Efficiency"),r("h2"),i("p"),a("For consumers that access an API across a low-bandwidth channel, itâ€™s critical that the amount of data transmitted can be reduced. When the consumer is being executed in a device with reduced processing power or battery, the format of the the data received should be cheap to parse. In distributed software environments, such as in microservice architectures, reducing the latency when invoking APIs is specially important. APIs should be designed with this efficiency constraints in mind. For example, consumers must be provided with mechanisms to control the format and amount of data returned from a request."),r("p"),i("p"),l({section:e.page},null,o),r("p"),r("article"),i("input",null,null,"type","hidden","value",e.page.title),r("input"),i("input",null,null,"type","hidden","value",e.site.title),r("input")};u(n.$$assignDefaults({content:s},e),null,o)}goog.module("IxcOL.incrementaldom");var n=goog.require("soy");goog.require("soydata");goog.require("goog.asserts"),goog.require("soy.asserts"),goog.require("goog.i18n.bidi"),goog.require("goog.string");var o=goog.require("incrementaldom"),i=o.elementOpen,r=o.elementClose,a=(o.elementVoid,o.elementOpenStart,o.elementOpenEnd,o.text),l=(o.attr,p.default.getTemplate("DocsList.incrementaldom","render")),u=p.default.getTemplate("guide.incrementaldom","render");return e.render=t,goog.DEBUG&&(t.soyTemplateName="IxcOL.render"),e.render.params=["page","site"],e.render.types={page:"?",site:"?"},e.templates=s=e,e});var d=function(e){function t(){return i(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),t}(u.default);p.default.register(d,s),t.IxcOL=d,t.templates=s,t.default=s}},[276]);